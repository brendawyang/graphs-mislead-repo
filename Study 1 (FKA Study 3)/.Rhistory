setwd("C:/Users/brend/Dropbox/_Marsh lab/project-graphs-misleading/paper 1/graphs-mislead-repo/Study 1 (FKA Study 3)")
# Chunk 1: packages
#Make sure all packages are installed
list.of.packages <- c("readr", "tidyr", "dplyr", "magrittr", "psych", "stringr", "effsize", "shiny", "readr", "lme4", "lmerTest", "kableExtra", "knitr", "ggplot2", "ggthemes", "cowplot", "pwr", "psych")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Chunk 2: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
#turn off scientific notation
options(scipen=999)
# Chunk 3: libraries
#Load all libraries
library(readr)
library(tidyr)
library(dplyr)
library(magrittr)
library(effsize)
library(lme4) # for mixed effects models
library(lmerTest)
library(kableExtra)
library(knitr)#kable
library(pwr)
##Raincloud Plot Libraries
source("../R_rainclouds.R")
library(cowplot)
library(ggthemes)
library(ggplot2)
# Chunk 4: raincloud plot
#raincloud plot theme
raincloud_theme <- theme(
text = element_text(size = 10),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16, margin = margin(r = 20)),
axis.text = element_text(size = 14),
legend.title=element_blank(),
legend.text=element_text(size=16),
legend.position = "right",
plot.title = element_text(lineheight=.8, face="bold", size = 16),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.grid.major.y = element_line(colour = 'light gray', size=0.5, linetype='solid'),
axis.line = element_blank(),
axis.ticks.y = element_blank())
# Chunk 5: data import
rating_df <- read_csv("data/clean/s3_rating_df.csv")
demographic_df <- read_csv("data/clean/s3_demographic_df.csv")
graphliteracy_df <- read_csv("data/clean/s3_graphliteracy_df.csv")
debriefing_df <- read_csv("data/clean/s3_debriefing_df.csv")
timing_df <- read_csv("data/clean/s3_timing_df.csv")
# Chunk 6
Exclude_Exercise_Check <- FALSE
participants_excluded <- demographic_df %>%
filter(check == "wrong") %>%
group_by(check) %>%
summarise(n = n())
if(Exclude_Exercise_Check == TRUE){rating_df <- rating_df %>%
filter(check == "right" | subject_condition == "no warning")
} else{rating_df <- rating_df}
if(Exclude_Exercise_Check == TRUE){demographic_df <- demographic_df %>%
filter(check == "right"| subject_condition == "no warning")
} else{demographic_df <- demographic_df}
# Chunk 7: addtional data frames
#Calculate subject means by condition
##(mean rating for truncated and mean rating for non-truncated graphs)
subject_mean_df <- rating_df %>%
group_by(participantID, subject_condition, graph_condition) %>%
summarise(subject_mean_rating = mean(rating)) %>%
arrange(participantID)
#Calculate subject difference rating
##(non-truncated mean rating - truncated mean rating)
subject_difference_df <- subject_mean_df %>%
spread(graph_condition, subject_mean_rating) %>%
mutate(difference =  truncated - control)
#Calculate subject overall graph literacy score
##(sum of graph literacy items)
subject_graphliteracy_df <- graphliteracy_df %>%
group_by(participantID,subject_condition) %>%
summarise(graphliteracy_sum_rating = sum(rating))
#Create mixed effects df
##(combination of ratings, overall graph literacy scores and some demographic questions --- education, gender and age)
models_df <- full_join(full_join(subject_graphliteracy_df, demographic_df[, c("participantID", "dem_ed", "dem_gender", "dem_age")]), rating_df)
##Create lm difference df
##(df with subject truncation effect scores (difference between truncated and control) + all demographics and graph literacy scores)
models_difference_df <- left_join(left_join(subject_difference_df,subject_graphliteracy_df), demographic_df[, c("participantID", "dem_ed", "dem_gender", "dem_age")])
#Create trimmed timing df
##(trims anything past 2 standard deviations from each participant's individual mean for each condition)
trimmed_timing_df <- timing_df %>%
group_by(participantID, subject_condition, graph_condition) %>%
mutate(avg = mean(time), stdev = sd(time)) %>%
filter(time <= 2*stdev+avg) %>%
as.data.frame()
graphliteracymodel <- lm(difference ~ graphliteracy_sum_rating, models_difference_df)
summary_graphliteracymodel <- summary(graphliteracymodel)
summary_graphliteracymodel
ggplot(models_difference_df, aes(x = graphliteracy_sum_rating, y = difference))+
geom_smooth(method = lm, color = "#510D73", fill = "#510D73") +
geom_jitter(alpha = 0.7)+
ylab("truncation effect")+
xlab("graph literacy score")+
ggtitle("Figure SI3 Graph Literacy")+
raincloud_theme+
theme(axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'))
# ggsave('../figures/figureSI3_graphliteracy.png', plot = last_plot(), width = 6, height = 4)
